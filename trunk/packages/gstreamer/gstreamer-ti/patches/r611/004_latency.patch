fix decoder latency by sending data to decoder as long as there is at least
200 bytes of data ready

--- a/src/gstticircbuffer.c
+++ b/src/gstticircbuffer.c
@@ -175,6 +175,7 @@ static void gst_ticircbuffer_init(GTypeI
     circBuf->fixedBlockSize  = FALSE;
     circBuf->consumerAborted = FALSE;
     circBuf->userCopy       = NULL;
+		circBuf->packetSend			= NULL;
 
     GST_LOG("end init");
 }
@@ -403,6 +404,10 @@ gboolean gst_ticircbuffer_queue_data(Gst
         gst_ticircbuffer_broadcast_producer(circBuf);
     }
 
+		if (gst_ticircbuffer_data_size(circBuf) >= 200 && circBuf->packetSend)
+		{
+			gst_ticircbuffer_broadcast_producer(circBuf);
+		}	
     goto exit;
 
 exit_fail:
@@ -512,17 +517,31 @@ GstBuffer* gst_ticircbuffer_get_data(Gst
     gst_ticircbuffer_reset_read_pointer(circBuf);
 
     /* Don't return any data util we have a full window available */
+    if (circBuf->packetSend)
+    {
+			while (gst_ticircbuffer_data_size(circBuf) < 200)
+			{
+        GST_LOG("blocking output until a full window is available\n");
+        gst_ticircbuffer_wait_on_producer(circBuf);
+        GST_LOG("unblocking output\n");
+        gst_ticircbuffer_reset_read_pointer(circBuf);
+        /* Reset our mutex condition so calling wait_on_consumer will block */
+        Rendezvous_reset(circBuf->waitOnProducer);				
+			}
+    
+    }
+    else
+    {
     while (!circBuf->drain && !gst_ticircbuffer_window_available(circBuf)) {
 
         GST_LOG("blocking output until a full window is available\n");
         gst_ticircbuffer_wait_on_producer(circBuf);
         GST_LOG("unblocking output\n");
         gst_ticircbuffer_reset_read_pointer(circBuf);
-
         /* Reset our mutex condition so calling wait_on_consumer will block */
         Rendezvous_reset(circBuf->waitOnProducer);
     }
-
+		}
     /* Set the size of the buffer to be no larger than the window size.  Some
      * audio codecs have an issue when you pass a buffer larger than 64K.
      * We need to pass it smaller buffer sizes though, as the EOS is detected
@@ -651,6 +670,14 @@ void gst_ticircbuffer_drain(GstTICircBuf
     }
 }
 
+void gst_ticircbuffer_packet_send(GstTICircBuffer *circBuf, gboolean status)
+{
+	if (circBuf == NULL)
+		return;
+		
+	circBuf->packetSend = status;
+}
+
 /******************************************************************************
  * gst_ticircbuffer_shift_data
  *    Look for uncopied data in the last window and move it to the first one.
--- a/src/gstticircbuffer.h
+++ b/src/gstticircbuffer.h
@@ -71,6 +71,7 @@ struct _GstTICircBuffer {
     /* Input Thresholds */
     Int32              windowSize;
     gboolean           drain;
+		gboolean					 packetSend;
     Int32              bytesNeeded;
 
     /* Blocking Conditions to Throttle I/O */
@@ -99,6 +100,8 @@ gboolean         gst_ticircbuffer_time_c
 GstBuffer*       gst_ticircbuffer_get_data(GstTICircBuffer *circBuf);
 void             gst_ticircbuffer_drain(GstTICircBuffer *circBuf,
                      gboolean status);
+void             gst_ticircbuffer_packet_send(GstTICircBuffer *circBuf,
+                     gboolean status);
 void             gst_ticircbuffer_set_display(GstTICircBuffer *circBuf,
                      gboolean disp);
 void             gst_ticircbuffer_consumer_aborted(GstTICircBuffer *circBuf);
--- a/src/gsttividdec.c
+++ b/src/gsttividdec.c
@@ -1168,6 +1168,8 @@ static gboolean gst_tividdec_codec_start
     viddec->circBuf =
         gst_ticircbuffer_new(Vdec_getInBufSize(viddec->hVd), 3, FALSE);
 
+		gst_ticircbuffer_packet_send(viddec->circBuf, TRUE);
+
     if (viddec->circBuf == NULL) {
         GST_ELEMENT_ERROR(viddec, RESOURCE, NO_SPACE_LEFT,
         ("failed to create circular input buffer\n"), (NULL));
--- a/src/gsttividdec2.c
+++ b/src/gsttividdec2.c
@@ -1130,6 +1130,12 @@ static GstStateChangeReturn gst_tividdec
             if (!gst_tividdec2_exit_video(viddec2)) {
                 return GST_STATE_CHANGE_FAILURE;
             }
+            
+  				  /* stop codec engine */
+				    if (gst_tividdec2_codec_stop(viddec2) < 0) {
+  			      GST_ERROR("failed to stop codec\n");
+  				  }
+	
             break;
 
         case GST_STATE_CHANGE_READY_TO_PAUSED:
@@ -1270,6 +1276,8 @@ static gboolean gst_tividdec2_codec_star
     viddec2->circBuf =
         gst_ticircbuffer_new(Vdec2_getInBufSize(viddec2->hVd), 3, FALSE);
 
+		gst_ticircbuffer_packet_send(viddec2->circBuf, TRUE);
+
     if (viddec2->circBuf == NULL) {
         GST_ELEMENT_ERROR(viddec2, RESOURCE, NO_SPACE_LEFT,
         ("failed to create circular input buffer\n"), (NULL));
@@ -1587,10 +1595,12 @@ thread_exit:
      */
     Rendezvous_force(viddec2->waitOnDecodeDrain);
 
+#if 0
     /* stop codec engine */
     if (gst_tividdec2_codec_stop(viddec2) < 0) {
         GST_ERROR("failed to stop codec\n");
     }
+#endif
 
     gst_object_unref(viddec2);
 
--- a/src/gsttividenc1.c
+++ b/src/gsttividenc1.c
@@ -1416,6 +1416,12 @@ static GstStateChangeReturn gst_tividenc
             if (!gst_tividenc1_exit_video(videnc1)) {
                 return GST_STATE_CHANGE_FAILURE;
             }
+            
+						/* Stop codec engine */
+						if (gst_tividenc1_codec_stop(videnc1) < 0) {
+							GST_ERROR("failed to stop codec\n");
+						}
+
             break;
 
         default:
@@ -1586,7 +1592,7 @@ static gboolean gst_tividenc1_codec_star
 
     /* Create a circular input buffer */
     if (videnc1->numInputBufs == 0) {
-        videnc1->numInputBufs = 2;
+        videnc1->numInputBufs = 3;
     }
 
     /* Check if we need to create circular buffer with different size */
@@ -1597,6 +1603,7 @@ static gboolean gst_tividenc1_codec_star
         inBufSize = Venc1_getInBufSize(videnc1->hVe1);
     }
 
+    printf("Input buffer size %d\n", inBufSize* videnc1->numInputBufs);
     videnc1->circBuf = gst_ticircbuffer_new(inBufSize, 
                             videnc1->numInputBufs, TRUE);
 
@@ -1621,7 +1628,7 @@ static gboolean gst_tividenc1_codec_star
     gfxAttrs.bAttrs.useMask = gst_tividenc1_CODEC_FREE;
 
     if (videnc1->numOutputBufs == 0) {
-        videnc1->numOutputBufs = 3;
+        videnc1->numOutputBufs = 2;
     }
     videnc1->hOutBufTab =
         BufTab_create(videnc1->numOutputBufs,
@@ -1938,12 +1945,12 @@ thread_exit:
      * they get the EOS.
      */
     Rendezvous_force(videnc1->waitOnEncodeDrain);
-
+#if 0
     /* Stop codec engine */
     if (gst_tividenc1_codec_stop(videnc1) < 0) {
         GST_ERROR("failed to stop codec\n");
     }
-
+#endif
     gst_object_unref(videnc1);
 
     GST_LOG("exit video encode_thread (%d)\n", (int)threadRet);
