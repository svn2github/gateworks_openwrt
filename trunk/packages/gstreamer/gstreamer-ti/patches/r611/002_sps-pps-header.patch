--- a/src/gsttiquicktime_h264.c
+++ b/src/gsttiquicktime_h264.c
@@ -509,6 +509,30 @@ static gboolean gst_h264_create_sps_pps
 }
 
 /******************************************************************************
+ * gst_h264_create_sps_pps_header
+ *  This function create SPS/PPS header prefixed with NAL code.
+ *****************************************************************************/
+GstBuffer* gst_h264_create_sps_pps_header(Buffer_Handle hBuf)
+{
+    GstBuffer *nal, *sps, *pps, *sps_pps_header = NULL;
+
+    nal = gst_h264_get_nal_prefix_code();
+
+    if (!gst_h264_create_sps_pps(hBuf, &sps, &pps)) {
+        goto exit;
+    }
+    /* NAL + SPS + NAL + PPS */
+    gst_buffer_ref(nal);
+    sps_pps_header = gst_buffer_join(nal, sps);
+    gst_buffer_ref(nal);
+    sps_pps_header = gst_buffer_join(sps_pps_header, nal);
+    sps_pps_header = gst_buffer_join(sps_pps_header, pps);
+
+    exit:   
+        return sps_pps_header; 
+}
+
+/******************************************************************************
  * gst_h264_create_codec_data
  *****************************************************************************/
 GstBuffer* gst_h264_create_codec_data (Buffer_Handle hBuf)
--- a/src/gsttiquicktime_h264.h
+++ b/src/gsttiquicktime_h264.h
@@ -89,6 +89,9 @@ gboolean gst_is_h264_encoder (const gcha
 /* Function to create codec_data (avcC atom) from h264 stream */
 GstBuffer* gst_h264_create_codec_data(Buffer_Handle hBuf);
 
+/* Function to create NAL prefixed sps, pps header from h264 stream */
+GstBuffer* gst_h264_create_sps_pps_header (Buffer_Handle hBuf);
+
 #endif /* __GST_TIQUICKTIME_H264_H__ */
 
 
--- a/src/gsttividenc.c
+++ b/src/gsttividenc.c
@@ -401,6 +401,7 @@ static void gst_tividenc_init(GstTIViden
     videnc->encodingPreset          = 1;
     videnc->byteStream              = TRUE;
     videnc->codec_data              = NULL;
+    videnc->sps_pps                 = NULL;
 }
 /******************************************************************************
  * gst_tividenc_find_colorSpace 
@@ -1126,6 +1127,12 @@ static gboolean gst_tividenc_exit_video(
         videnc->codec_data = NULL;
     }
 
+    if (videnc->sps_pps) {
+        GST_LOG("freeing sps_pps buffer\n");
+        gst_buffer_unref(videnc->sps_pps);
+        videnc->sps_pps = NULL;
+    }
+
     GST_LOG("end exit_video\n");
     return TRUE;
 }
@@ -1363,6 +1370,12 @@ void gst_tividenc_populate_codec_header
                 videnc->codec_data = gst_h264_create_codec_data(hDstBuf);
             }
         }
+        else {
+            /* generate sps/pps header prefixed with start code */
+            if (!videnc->sps_pps) {
+                videnc->sps_pps = gst_h264_create_sps_pps_header(hDstBuf);
+            }
+        }
     }
 }
 
@@ -1371,7 +1384,7 @@ void gst_tividenc_populate_codec_header
  *  Function parses and push the output buffer .
  *****************************************************************************/
 GstFlowReturn  gst_tividenc_parse_and_push (GstTIVidenc *videnc, 
-    GstBuffer *outBuf)
+    GstBuffer *outBuf, IVIDEO_FrameType frameType)
 {
     guint8 *data;
     guint   len;
@@ -1391,6 +1404,13 @@ GstFlowReturn  gst_tividenc_parse_and_pu
             data[1] = (len >> 16) & 0xff;
             data[0] = (len >> 24) & 0xff;
         }
+        /* prefix I-frame with SPS/PPS header */
+        else {
+            if (frameType == IVIDEO_I_FRAME) {
+                gst_buffer_ref(videnc->sps_pps);
+                outBuf = gst_buffer_join(videnc->sps_pps, outBuf);
+            }
+        }
     }
 
     return gst_pad_push(videnc->srcpad, outBuf);
@@ -1414,6 +1434,7 @@ static void* gst_tividenc_encode_thread(
     GstBuffer           *outBuf;
     Int                 bufIdx;
     Int                 ret;
+    IVIDEO_FrameType    frameType;
 
     GST_LOG("starting  video encode thread\n");
 
@@ -1499,6 +1520,7 @@ static void* gst_tividenc_encode_thread(
         GST_LOG("invoking the video encoder\n");
         ret             = Venc_process(videnc->hVe, hInBuf, hDstBuf);
         encDataConsumed = Buffer_getNumBytesUsed(hEncDataWindow);
+        frameType = BufferGfx_getFrameType(hInBuf);
 
         if (ret < 0) {
             GST_ELEMENT_ERROR(videnc, STREAM, ENCODE,
@@ -1566,7 +1588,8 @@ static void* gst_tividenc_encode_thread(
         /* Parse and Push the transport buffer to the source pad */
         GST_LOG("pushing display buffer to source pad\n");
 
-        if (gst_tividenc_parse_and_push(videnc, outBuf) != GST_FLOW_OK) {
+        if (gst_tividenc_parse_and_push(videnc, outBuf, frameType) != 
+                GST_FLOW_OK) {
             GST_DEBUG("push to source pad failed\n");
             goto thread_failure;
         }
--- a/src/gsttividenc.h
+++ b/src/gsttividenc.h
@@ -108,7 +108,7 @@ struct _GstTIVidenc
   GstTICircBuffer   *circBuf;
 
   /* H.264 header */
-  GstBuffer  *codec_data;
+  GstBuffer  *codec_data, *sps_pps;
   gboolean   byteStream;
 };
 
--- a/src/gsttividenc1.c
+++ b/src/gsttividenc1.c
@@ -447,6 +447,7 @@ static void gst_tividenc1_init(GstTIVide
     videnc1->encodingPreset         = 1;
     videnc1->byteStream             = TRUE;
     videnc1->codec_data             = NULL;
+    videnc1->sps_pps                = NULL;
 }
 
 /******************************************************************************
@@ -1358,6 +1359,12 @@ static gboolean gst_tividenc1_exit_video
         videnc1->codec_data = NULL;
     }
 
+    if (videnc1->sps_pps) {
+        GST_LOG("freeing sps_pps buffer\n");
+        gst_buffer_unref(videnc1->sps_pps);
+        videnc1->sps_pps = NULL;
+    }
+
     GST_LOG("end exit_video\n");
     return TRUE;
 }
@@ -1637,6 +1644,12 @@ void gst_tividenc1_populate_codec_header
                 videnc1->codec_data = gst_h264_create_codec_data(hDstBuf);
             }
         }
+        else {
+            /* generate sps/pps header prefixed with start code */
+            if (!videnc1->sps_pps) {
+                videnc1->sps_pps = gst_h264_create_sps_pps_header(hDstBuf);
+            }
+        }
     }
 }
 
@@ -1645,7 +1658,7 @@ void gst_tividenc1_populate_codec_header
  *  Function parses and push the output buffer .
  *****************************************************************************/
 GstFlowReturn  gst_tividenc1_parse_and_push (GstTIVidenc1 *videnc1, 
-    GstBuffer *outBuf)
+    GstBuffer *outBuf, IVIDEO_FrameType frameType)
 {
     guint8 *data;
     guint   len;
@@ -1665,6 +1678,13 @@ GstFlowReturn  gst_tividenc1_parse_and_p
             data[1] = (len >> 16) & 0xff;
             data[0] = (len >> 24) & 0xff;
         }
+        /* prefix I-frame with SPS/PPS header */
+        else {
+            if (frameType == IVIDEO_I_FRAME) {
+                gst_buffer_ref(videnc1->sps_pps);
+                outBuf = gst_buffer_join(videnc1->sps_pps, outBuf);
+            }
+        }
     }
 
     return gst_pad_push(videnc1->srcpad, outBuf);
@@ -1688,6 +1708,7 @@ static void* gst_tividenc1_encode_thread
     GstBuffer           *outBuf;
     Int                 bufIdx;
     Int                 ret;
+    IVIDEO_FrameType    frameType;
 
     /* Calculate the duration of a single frame in this stream */
     frameDuration = gst_tividenc1_frame_duration(videnc1);
@@ -1791,6 +1812,7 @@ static void* gst_tividenc1_encode_thread
         /* Invoke the video encoder */
         GST_LOG("invoking the video encoder\n");
         ret   = Venc1_process(videnc1->hVe1, hInBuf, hDstBuf);
+        frameType = BufferGfx_getFrameType(hInBuf);
 
         encDataConsumed = GST_BUFFER_SIZE(encDataWindow);
 
@@ -1856,7 +1878,8 @@ static void* gst_tividenc1_encode_thread
 
         /* Parse and Push the transport buffer to the source pad */
         GST_LOG("pushing display buffer to source pad\n");
-        if (gst_tividenc1_parse_and_push(videnc1, outBuf) != GST_FLOW_OK) {
+        if (gst_tividenc1_parse_and_push(videnc1, outBuf, frameType) != 
+                GST_FLOW_OK) {
             GST_DEBUG("push to source pad failed\n");
             goto thread_failure;
         }
--- a/src/gsttividenc1.h
+++ b/src/gsttividenc1.h
@@ -112,7 +112,7 @@ struct _GstTIVidenc1
   GstTICircBuffer *circBuf;
 
   /* H.264 header */
-  GstBuffer  *codec_data;
+  GstBuffer  *codec_data, *sps_pps;
   gboolean   byteStream;
 };
 
