Index: trunk/package/firmware/linux-firmware/Makefile
===================================================================
--- trunk/package/firmware/linux-firmware/Makefile	(revision 42297)
+++ trunk/package/firmware/linux-firmware/Makefile	(working copy)
@@ -61,3 +61,43 @@
 endef
 
 $(eval $(call BuildPackage,r8188eu-firmware))
+
+define Package/ibt-firmware
+  SECTION:=firmware
+  CATEGORY:=Firmware
+  URL:=http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git
+  TITLE:=Intel bluetooth firmware
+endef
+
+define Build/Compile
+
+endef
+
+define Package/ibt-firmware/install
+	$(INSTALL_DIR) $(1)/lib/firmware/intel
+	$(CP) \
+		$(PKG_BUILD_DIR)/intel/*.bseq \
+		$(1)/lib/firmware/intel
+endef
+
+$(eval $(call BuildPackage,ibt-firmware))
+
+define Package/ar3k-firmware
+  SECTION:=firmware
+  CATEGORY:=Firmware
+  URL:=http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git
+  TITLE:=ath3k firmware
+endef
+
+define Build/Compile
+
+endef
+
+define Package/ar3k-firmware/install
+	$(INSTALL_DIR) $(1)/lib/firmware/ar3k
+	$(CP) \
+		$(PKG_BUILD_DIR)/ar3k/*.dfu \
+		$(1)/lib/firmware/ar3k
+endef
+
+$(eval $(call BuildPackage,ar3k-firmware))
Index: trunk/package/kernel/linux/modules/input.mk
===================================================================
--- trunk/package/kernel/linux/modules/input.mk	(revision 42297)
+++ trunk/package/kernel/linux/modules/input.mk	(working copy)
@@ -202,3 +202,19 @@
 endef
 
 $(eval $(call KernelPackage,keyboard-imx))
+
+define KernelPackage/input-mma8451
+  SUBMENU:=$(INPUT_MODULES_MENU)
+  TITLE:=MMA8451 input device driver
+  DEPENDS:=+kmod-i2c-core +kmod-input-polldev
+  KCONFIG:=CONFIG_INPUT_MMA8451
+  FILES:=$(LINUX_DIR)/drivers/input/misc/mma8451.ko
+  AUTOLOAD:=$(call AutoProbe,mma8451)
+  $(call AddDepends/input)
+endef
+
+define KernelPackage/input-mma8451/description
+ MMA8451 device driver
+endef
+
+$(eval $(call KernelPackage,input-mma8451))
Index: trunk/package/kernel/linux/modules/netdevices.mk
===================================================================
--- trunk/package/kernel/linux/modules/netdevices.mk	(revision 42297)
+++ trunk/package/kernel/linux/modules/netdevices.mk	(working copy)
@@ -147,6 +147,24 @@
 $(eval $(call KernelPackage,gw16083))
 
 
+define KernelPackage/gw16083
+  SUBMENU:=$(NETWORK_DEVICES_MENU)
+  TITLE:=Gateworks Ventana Ethernet Expansion Mezzanine driver
+  URL:=http://www.gateworks.com
+  FILES:=$(LINUX_DIR)/drivers/net/phy/gw16083.ko
+  KCONFIG:=CONFIG_GATEWORKS_GW16083
+  DEPENDS:=@PCI_SUPPORT +kmod-libphy +kmod-igb
+  AUTOLOAD:=$(call AutoLoad,36,gw16083)
+endef
+
+define KernelPackage/gw16083/description
+ This package contains the gw16083 kernel module for supporting the Gateworks
+ Ventana Ethernet Expansion Mezzanine.
+endef
+
+$(eval $(call KernelPackage,gw16083))
+
+
 define KernelPackage/swconfig
   SUBMENU:=$(NETWORK_DEVICES_MENU)
   TITLE:=switch configuration API
Index: trunk/package/kernel/linux/modules/other.mk
===================================================================
--- trunk/package/kernel/linux/modules/other.mk	(revision 42297)
+++ trunk/package/kernel/linux/modules/other.mk	(working copy)
@@ -40,6 +40,7 @@
 	CONFIG_BLUEZ_HCIUSB \
 	CONFIG_BLUEZ_HIDP \
 	CONFIG_BT \
+	CONFIG_BT_ATH3K \
 	CONFIG_BT_L2CAP=y \
 	CONFIG_BT_SCO=y \
 	CONFIG_BT_RFCOMM \
@@ -48,6 +49,7 @@
 	CONFIG_BT_HCIUSB \
 	CONFIG_BT_HCIUART \
 	CONFIG_BT_HCIUART_H4 \
+	CONFIG_BT_HCIUART_ATH3K=y \
 	CONFIG_BT_HIDP \
 	CONFIG_HID_SUPPORT=y
   $(call AddDepends/crc16)
@@ -59,8 +61,9 @@
 	$(LINUX_DIR)/net/bluetooth/bnep/bnep.ko \
 	$(LINUX_DIR)/net/bluetooth/hidp/hidp.ko \
 	$(LINUX_DIR)/drivers/bluetooth/hci_uart.ko \
-	$(LINUX_DIR)/drivers/bluetooth/btusb.ko
-  AUTOLOAD:=$(call AutoProbe,bluetooth rfcomm bnep hidp hci_uart btusb)
+	$(LINUX_DIR)/drivers/bluetooth/btusb.ko \
+	$(LINUX_DIR)/drivers/bluetooth/ath3k.ko
+  AUTOLOAD:=$(call AutoProbe,bluetooth rfcomm bnep hidp hci_uart btusb ath3k)
 endef
 
 define KernelPackage/bluetooth/description
Index: trunk/package/kernel/mac80211/patches/921-ath10k-fix-aggregated-4addr-Rx.patch
===================================================================
--- trunk/package/kernel/mac80211/patches/921-ath10k-fix-aggregated-4addr-Rx.patch	(revision 0)
+++ trunk/package/kernel/mac80211/patches/921-ath10k-fix-aggregated-4addr-Rx.patch	(working copy)
@@ -0,0 +1,64 @@
+From 72bdeb86552f8d992aa854af4e320401d8dd5cb5 Mon Sep 17 00:00:00 2001
+From: Michal Kazior <michal.kazior@tieto.com>
+Date: Mon, 28 Jul 2014 23:59:42 +0300
+Subject: [PATCH] ath10k: fix aggregated 4addr Rx
+
+A-MSDU 4addr frames weren't reconstructed properly
+and in some cases this resulted in a warning:
+
+ br0: received packet on wlan0.sta1 with own address as source address
+
+Since this was only related to A-MSDU it would
+trigger when more intense traffic was generated.
+
+Reported-by: Vu Hai NGUYEN <vh.nguyen@actiasodielec.fr>
+Signed-off-by: Michal Kazior <michal.kazior@tieto.com>
+Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>
+---
+ drivers/net/wireless/ath/ath10k/htt_rx.c | 14 +++++++++-----
+ 1 file changed, 9 insertions(+), 5 deletions(-)
+
+diff --git a/drivers/net/wireless/ath/ath10k/htt_rx.c b/drivers/net/wireless/ath/ath10k/htt_rx.c
+index 80cdac1..e31d93e 100644
+--- a/drivers/net/wireless/ath/ath10k/htt_rx.c
++++ b/drivers/net/wireless/ath/ath10k/htt_rx.c
+@@ -866,7 +866,7 @@ static void ath10k_htt_rx_amsdu(struct ath10k_htt *htt,
+ 	enum rx_msdu_decap_format fmt;
+ 	enum htt_rx_mpdu_encrypt_type enctype;
+ 	struct ieee80211_hdr *hdr;
+-	u8 hdr_buf[64], addr[ETH_ALEN], *qos;
++	u8 hdr_buf[64], da[ETH_ALEN], sa[ETH_ALEN], *qos;
+ 	unsigned int hdr_len;
+ 
+ 	rxd = (void *)skb->data - sizeof(*rxd);
+@@ -904,10 +904,11 @@ static void ath10k_htt_rx_amsdu(struct ath10k_htt *htt,
+ 			skb_trim(skb, skb->len - FCS_LEN);
+ 			break;
+ 		case RX_MSDU_DECAP_NATIVE_WIFI:
+-			/* pull decapped header and copy DA */
++			/* pull decapped header and copy SA & DA */
+ 			hdr = (struct ieee80211_hdr *)skb->data;
+ 			hdr_len = ath10k_htt_rx_nwifi_hdrlen(hdr);
+-			memcpy(addr, ieee80211_get_DA(hdr), ETH_ALEN);
++			memcpy(da, ieee80211_get_DA(hdr), ETH_ALEN);
++			memcpy(sa, ieee80211_get_SA(hdr), ETH_ALEN);
+ 			skb_pull(skb, hdr_len);
+ 
+ 			/* push original 802.11 header */
+@@ -921,8 +922,11 @@ static void ath10k_htt_rx_amsdu(struct ath10k_htt *htt,
+ 			qos = ieee80211_get_qos_ctl(hdr);
+ 			qos[0] &= ~IEEE80211_QOS_CTL_A_MSDU_PRESENT;
+ 
+-			/* original 802.11 header has a different DA */
+-			memcpy(ieee80211_get_DA(hdr), addr, ETH_ALEN);
++			/* original 802.11 header has a different DA and in
++			 * case of 4addr it may also have different SA
++			 */
++			memcpy(ieee80211_get_DA(hdr), da, ETH_ALEN);
++			memcpy(ieee80211_get_SA(hdr), sa, ETH_ALEN);
+ 			break;
+ 		case RX_MSDU_DECAP_ETHERNET2_DIX:
+ 			/* strip ethernet header and insert decapped 802.11
+-- 
+1.9.1
+
Index: trunk/package/kernel/mac80211/patches/925-ath10k_stop_monitor_vdev_for_sta_assoc.patch
===================================================================
--- trunk/package/kernel/mac80211/patches/925-ath10k_stop_monitor_vdev_for_sta_assoc.patch	(revision 0)
+++ trunk/package/kernel/mac80211/patches/925-ath10k_stop_monitor_vdev_for_sta_assoc.patch	(working copy)
@@ -0,0 +1,21 @@
+--- a/drivers/net/wireless/ath/ath10k/mac.c
++++ b/drivers/net/wireless/ath/ath10k/mac.c
+@@ -3022,8 +3022,16 @@ static void ath10k_bss_info_changed(stru
+ 	}
+ 
+ 	if (changed & BSS_CHANGED_ASSOC) {
+-		if (info->assoc)
+-			ath10k_bss_assoc(hw, vif, info);
++		if (info->assoc) {
++			/* Workaround: Make sure monitor vdev is not running
++			 * when associating to prevent some firmware revisions
++			 * (e.g. 10.1 and 10.2) from crashing.
++			 */
++			if (ar->monitor_started)
++				ath10k_monitor_stop(ar);
++ 			ath10k_bss_assoc(hw, vif, info);
++			ath10k_monitor_recalc(ar);
++		}
+ 	}
+ 
+ exit:
Index: trunk/package/kernel/mac80211/patches/926-ath10k_fix_monitor_start-stop_sequences.patch
===================================================================
--- trunk/package/kernel/mac80211/patches/926-ath10k_fix_monitor_start-stop_sequences.patch	(revision 0)
+++ trunk/package/kernel/mac80211/patches/926-ath10k_fix_monitor_start-stop_sequences.patch	(working copy)
@@ -0,0 +1,210 @@
+--- a/drivers/net/wireless/ath/ath10k/core.h
++++ b/drivers/net/wireless/ath/ath10k/core.h
+@@ -428,7 +428,6 @@ struct ath10k {
+ 	struct cfg80211_chan_def chandef;
+ 
+ 	int free_vdev_map;
+-	bool promisc;
+ 	bool monitor;
+ 	int monitor_vdev_id;
+ 	bool monitor_started;
+--- a/drivers/net/wireless/ath/ath10k/mac.c
++++ b/drivers/net/wireless/ath/ath10k/mac.c
+@@ -489,19 +489,6 @@ static inline int ath10k_vdev_setup_sync
+ 	return 0;
+ }
+ 
+-static bool ath10k_monitor_is_enabled(struct ath10k *ar)
+-{
+-	lockdep_assert_held(&ar->conf_mutex);
+-
+-	ath10k_dbg(ATH10K_DBG_MAC,
+-		   "mac monitor refs: promisc %d monitor %d cac %d\n",
+-		   ar->promisc, ar->monitor,
+-		   test_bit(ATH10K_CAC_RUNNING, &ar->dev_flags));
+-
+-	return ar->promisc || ar->monitor ||
+-	       test_bit(ATH10K_CAC_RUNNING, &ar->dev_flags);
+-}
+-
+ static int ath10k_monitor_vdev_start(struct ath10k *ar, int vdev_id)
+ {
+ 	struct cfg80211_chan_def *chandef = &ar->chandef;
+@@ -651,16 +638,6 @@ static int ath10k_monitor_start(struct a
+ 
+ 	lockdep_assert_held(&ar->conf_mutex);
+ 
+-	if (!ath10k_monitor_is_enabled(ar)) {
+-		ath10k_warn("trying to start monitor with no references\n");
+-		return 0;
+-	}
+-
+-	if (ar->monitor_started) {
+-		ath10k_dbg(ATH10K_DBG_MAC, "mac monitor already started\n");
+-		return 0;
+-	}
+-
+ 	ret = ath10k_monitor_vdev_create(ar);
+ 	if (ret) {
+ 		ath10k_warn("failed to create monitor vdev: %d\n", ret);
+@@ -680,34 +657,51 @@ static int ath10k_monitor_start(struct a
+ 	return 0;
+ }
+ 
+-static void ath10k_monitor_stop(struct ath10k *ar)
++static int ath10k_monitor_stop(struct ath10k *ar)
+ {
+ 	int ret;
+ 
+ 	lockdep_assert_held(&ar->conf_mutex);
+ 
+-	if (ath10k_monitor_is_enabled(ar)) {
+-		ath10k_dbg(ATH10K_DBG_MAC,
+-			   "mac monitor will be stopped later\n");
+-		return;
+-	}
+-
+-	if (!ar->monitor_started) {
+-		ath10k_dbg(ATH10K_DBG_MAC,
+-			   "mac monitor probably failed to start earlier\n");
+-		return;
+-	}
+-
+ 	ret = ath10k_monitor_vdev_stop(ar);
+-	if (ret)
++	if (ret) {
+ 		ath10k_warn("failed to stop monitor vdev: %d\n", ret);
++		return ret;
++	}
+ 
+ 	ret = ath10k_monitor_vdev_delete(ar);
+-	if (ret)
++	if (ret) {
+ 		ath10k_warn("failed to delete monitor vdev: %d\n", ret);
++		return ret;
++	}
+ 
+ 	ar->monitor_started = false;
+ 	ath10k_dbg(ATH10K_DBG_MAC, "mac monitor stopped\n");
++
++	return 0;
++}
++
++static int ath10k_monitor_recalc(struct ath10k *ar)
++{
++	bool should_start;
++
++	lockdep_assert_held(&ar->conf_mutex);
++
++	should_start = ar->monitor ||
++		       ar->filter_flags & FIF_PROMISC_IN_BSS ||
++		       test_bit(ATH10K_CAC_RUNNING, &ar->dev_flags);
++
++	ath10k_dbg(ATH10K_DBG_MAC,
++		   "mac monitor recalc started? %d should? %d\n",
++		   ar->monitor_started, should_start);
++
++	if (should_start == ar->monitor_started)
++		return 0;
++
++	if (should_start)
++		return ath10k_monitor_start(ar);
++	else
++		return ath10k_monitor_stop(ar);
+ }
+ 
+ static int ath10k_recalc_rtscts_prot(struct ath10k_vif *arvif)
+@@ -738,7 +732,7 @@ static int ath10k_start_cac(struct ath10
+ 
+ 	set_bit(ATH10K_CAC_RUNNING, &ar->dev_flags);
+ 
+-	ret = ath10k_monitor_start(ar);
++	ret = ath10k_monitor_recalc(ar);
+ 	if (ret) {
+ 		ath10k_warn("failed to start monitor (cac): %d\n", ret);
+ 		clear_bit(ATH10K_CAC_RUNNING, &ar->dev_flags);
+@@ -2295,12 +2289,14 @@ void ath10k_halt(struct ath10k *ar)
+ 
+ 	lockdep_assert_held(&ar->conf_mutex);
+ 
+-	if (ath10k_monitor_is_enabled(ar)) {
+-		clear_bit(ATH10K_CAC_RUNNING, &ar->dev_flags);
+-		ar->promisc = false;
+-		ar->monitor = false;
++	clear_bit(ATH10K_CAC_RUNNING, &ar->dev_flags);
++	ar->filter_flags = 0;
++	ar->monitor = false;
++
++	if (ar->monitor_started)
+ 		ath10k_monitor_stop(ar);
+-	}
++
++	ar->monitor_started = false;
+ 
+ 	del_timer_sync(&ar->scan.timeout);
+ 	ath10k_offchan_tx_purge(ar);
+@@ -2474,7 +2470,7 @@ static void ath10k_config_chan(struct at
+ 	/* First stop monitor interface. Some FW versions crash if there's a
+ 	 * lone monitor interface. */
+ 	if (ar->monitor_started)
+-		ath10k_monitor_vdev_stop(ar);
++		ath10k_monitor_stop(ar);
+ 
+ 	list_for_each_entry(arvif, &ar->arvifs, list) {
+ 		if (!arvif->is_started)
+@@ -2519,8 +2515,7 @@ static void ath10k_config_chan(struct at
+ 		}
+ 	}
+ 
+-	if (ath10k_monitor_is_enabled(ar))
+-		ath10k_monitor_vdev_start(ar, ar->monitor_vdev_id);
++	ath10k_monitor_recalc(ar);
+ }
+ 
+ static int ath10k_config(struct ieee80211_hw *hw, u32 changed)
+@@ -2575,19 +2570,10 @@ static int ath10k_config(struct ieee8021
+ 		ath10k_config_ps(ar);
+ 
+ 	if (changed & IEEE80211_CONF_CHANGE_MONITOR) {
+-		if (conf->flags & IEEE80211_CONF_MONITOR && !ar->monitor) {
+-			ar->monitor = true;
+-			ret = ath10k_monitor_start(ar);
+-			if (ret) {
+-				ath10k_warn("failed to start monitor (config): %d\n",
+-					    ret);
+-				ar->monitor = false;
+-			}
+-		} else if (!(conf->flags & IEEE80211_CONF_MONITOR) &&
+-			   ar->monitor) {
+-			ar->monitor = false;
+-			ath10k_monitor_stop(ar);
+-		}
++		ar->monitor = conf->flags & IEEE80211_CONF_MONITOR;
++		ret = ath10k_monitor_recalc(ar);
++		if (ret)
++			ath10k_warn(ar, "failed to recalc monitor: %d\n", ret);
+ 	}
+ 
+ 	mutex_unlock(&ar->conf_mutex);
+@@ -2844,18 +2830,9 @@ static void ath10k_configure_filter(stru
+ 	*total_flags &= SUPPORTED_FILTERS;
+ 	ar->filter_flags = *total_flags;
+ 
+-	if (ar->filter_flags & FIF_PROMISC_IN_BSS && !ar->promisc) {
+-		ar->promisc = true;
+-		ret = ath10k_monitor_start(ar);
+-		if (ret) {
+-			ath10k_warn("failed to start monitor (promisc): %d\n",
+-				    ret);
+-			ar->promisc = false;
+-		}
+-	} else if (!(ar->filter_flags & FIF_PROMISC_IN_BSS) && ar->promisc) {
+-		ar->promisc = false;
+-		ath10k_monitor_stop(ar);
+-	}
++	ret = ath10k_monitor_recalc(ar);
++	if (ret)
++		ath10k_warn(ar, "failed to recalc montior: %d\n", ret);
+ 
+ 	mutex_unlock(&ar->conf_mutex);
+ }
Index: trunk/package/kernel/mac80211/patches/999-ath9k_reset_fix.patch
===================================================================
--- trunk/package/kernel/mac80211/patches/999-ath9k_reset_fix.patch	(revision 0)
+++ trunk/package/kernel/mac80211/patches/999-ath9k_reset_fix.patch	(working copy)
@@ -0,0 +1,201 @@
+--- a/drivers/net/wireless/ath/ath9k/hw.h
++++ b/drivers/net/wireless/ath/ath9k/hw.h
+@@ -741,6 +741,7 @@ enum ath_cal_list {
+ #define AH_UNPLUGGED    0x2 /* The card has been physically removed. */
+ #define AH_FASTCC       0x4
+ #define AH_NO_EEP_SWAP  0x8 /* Do not swap EEPROM data */
++#define AH_HARD_RESET   0x10 /* hard reset in progress - do not wait for queues */
+ 
+ struct ath_hw {
+ 	struct ath_ops reg_ops;
+--- a/drivers/net/wireless/ath/ath9k/mac.c
++++ b/drivers/net/wireless/ath/ath9k/mac.c
+@@ -149,13 +149,15 @@ void ath9k_hw_abort_tx_dma(struct ath_hw
+ 	REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
+ 	REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
+ 
+-	for (q = 0; q < AR_NUM_QCU; q++) {
+-		for (i = 0; i < maxdelay; i++) {
+-			if (i)
+-				udelay(5);
++	if (!(ah->ah_flags & AH_HARD_RESET)) {
++		for (q = 0; q < AR_NUM_QCU; q++) {
++			for (i = 0; i < maxdelay; i++) {
++				if (i)
++					udelay(5);
+ 
+-			if (!ath9k_hw_numtxpending(ah, q))
+-				break;
++				if (!ath9k_hw_numtxpending(ah, q))
++					break;
++			}
+ 		}
+ 	}
+ 
+--- a/drivers/net/wireless/ath/ath9k/main.c
++++ b/drivers/net/wireless/ath/ath9k/main.c
+@@ -16,6 +16,7 @@
+ 
+ #include <linux/nl80211.h>
+ #include <linux/delay.h>
++#include <linux/rtnetlink.h>
+ #include "ath9k.h"
+ #include "btcoex.h"
+ 
+@@ -181,8 +182,13 @@ static void __ath_cancel_work(struct ath
+ 
+ void ath_cancel_work(struct ath_softc *sc)
+ {
++	struct ath_hw *ah = sc->sc_ah;
++	struct ath_common *common = ath9k_hw_common(ah);
+ 	__ath_cancel_work(sc);
+-	cancel_work_sync(&sc->hw_reset_work);
++
++	if (!(test_bit(ATH_OP_HW_RESET, &common->op_flags))) {
++		cancel_work_sync(&sc->hw_reset_work);
++	}
+ }
+ 
+ void ath_restart_work(struct ath_softc *sc)
+@@ -705,13 +711,6 @@ void ath9k_queue_reset(struct ath_softc
+ 	ieee80211_queue_work(sc->hw, &sc->hw_reset_work);
+ }
+ 
+-void ath_reset_work(struct work_struct *work)
+-{
+-	struct ath_softc *sc = container_of(work, struct ath_softc, hw_reset_work);
+-
+-	ath_reset(sc);
+-}
+-
+ /**********************/
+ /* mac80211 callbacks */
+ /**********************/
+@@ -785,8 +784,13 @@ static int ath9k_start(struct ieee80211_
+ 	clear_bit(ATH_OP_INVALID, &common->op_flags);
+ 	sc->sc_ah->is_monitoring = false;
+ 
+-	if (!ath_complete_reset(sc, false))
+-		ah->reset_power_on = false;
++	if (test_bit(ATH_OP_HW_RESET, &common->op_flags)) {
++		if (!ath_complete_reset(sc, true))
++			ah->reset_power_on = false;
++	} else {
++		if (!ath_complete_reset(sc, false))
++			ah->reset_power_on = false;
++	}
+ 
+ 	if (ah->led_pin >= 0) {
+ 		ath9k_hw_cfg_output(ah, ah->led_pin,
+@@ -962,7 +966,84 @@ static void ath9k_stop(struct ieee80211_
+ 	ath_dbg(common, CONFIG, "Driver halt\n");
+ }
+ 
+-static bool ath9k_uses_beacons(int type)
++
++static void ath9k_restore_keys(struct ieee80211_hw *hw,
++				struct ieee80211_vif *vif,
++				struct ieee80211_sta *sta,
++				struct ieee80211_key_conf *key,
++				void *data)
++{
++  struct ath_softc *sc = data;
++	struct ath_hw *ah = sc->sc_ah;
++	struct ath_common *common = ath9k_hw_common(ah);
++	int ret = 0;
++
++	ret = ath_key_config(common, vif, sta, key);
++	if (ret >= 0) {
++		key->hw_key_idx = ret;
++		/* push IV and Michael MIC generation to stack */
++		key->flags |= IEEE80211_KEY_FLAG_GENERATE_IV;
++		if (key->cipher == WLAN_CIPHER_SUITE_TKIP)
++			key->flags |= IEEE80211_KEY_FLAG_GENERATE_MMIC;
++		if (sc->sc_ah->sw_mgmt_crypto &&
++		    key->cipher == WLAN_CIPHER_SUITE_CCMP)
++			key->flags |= IEEE80211_KEY_FLAG_SW_MGMT_TX;
++		ret = 0;
++	}
++
++ 	if (sta && sta->drv_priv) {
++		struct ath_node *an = (struct ath_node *) sta->drv_priv;
++		if (an)
++			an->ps_key = ret;
++	}
++}
++
++static void ath9k_reset_vif_iter(void *data, u8 *mac, struct ieee80211_vif *vif)
++{
++	struct ath_softc *sc = data;
++
++	ieee80211_iter_keys(sc->hw, vif, ath9k_restore_keys, sc);
++}
++
++void ath_reset_work(struct work_struct *work)
++{
++	struct ath_softc *sc = container_of(work, struct ath_softc, hw_reset_work);
++	struct ath_hw *ah = sc->sc_ah;
++	struct ath_common *common = ath9k_hw_common(ah);
++	int i;
++
++	// Fully Stop Driver
++	ah->ah_flags |= AH_HARD_RESET;
++	ath9k_stop(sc->hw);
++	ah->ah_flags &= ~AH_HARD_RESET;
++
++	// clear keymap
++	for (i = 0; i < common->keymax; i++) {
++		clear_bit(i, common->keymap);
++		clear_bit(i, common->ccmp_keymap);
++	}
++
++	// Fully Start Driver
++	ath9k_start(sc->hw);
++
++	// Now restart the queues
++	for (i = 0; i < ATH9K_NUM_TX_QUEUES; i++) {
++		if (!ATH_TXQ_SETUP(sc, i))
++			continue;
++
++		spin_lock_bh(&sc->tx.txq[i].axq_lock);
++		ath_txq_schedule(sc, &sc->tx.txq[i]);
++		spin_unlock_bh(&sc->tx.txq[i].axq_lock);
++	}
++
++	// restore keys
++	rtnl_lock();
++	ieee80211_iterate_active_interfaces(sc->hw, IEEE80211_IFACE_ITER_RESUME_ALL,
++		ath9k_reset_vif_iter, sc);
++	rtnl_unlock();
++}
++
++bool ath9k_uses_beacons(int type)
+ {
+ 	switch (type) {
+ 	case NL80211_IFTYPE_AP:
+--- a/drivers/net/wireless/ath/ath9k/recv.c
++++ b/drivers/net/wireless/ath/ath9k/recv.c
+@@ -476,7 +476,11 @@ bool ath_stoprecv(struct ath_softc *sc)
+ 
+ 	ath9k_hw_abortpcurecv(ah);
+ 	ath9k_hw_setrxfilter(ah, 0);
+-	stopped = ath9k_hw_stopdmarecv(ah, &reset);
++
++	if (!(ah->ah_flags & AH_HARD_RESET))
++		stopped = ath9k_hw_stopdmarecv(ah, &reset);
++	else
++		stopped = true;
+ 
+ 	ath_flushrecv(sc);
+ 
+--- a/drivers/net/wireless/ath/ath9k/xmit.c
++++ b/drivers/net/wireless/ath/ath9k/xmit.c
+@@ -1778,7 +1778,7 @@ bool ath_drain_all_txq(struct ath_softc
+ 			npend |= BIT(i);
+ 	}
+ 
+-	if (npend)
++	if (npend && !test_bit(ATH_OP_HW_RESET, &common->op_flags))
+ 		ath_err(common, "Failed to stop TX DMA, queues=0x%03x!\n", npend);
+ 
+ 	for (i = 0; i < ATH9K_NUM_TX_QUEUES; i++) {
Index: trunk/package/network/utils/iproute2/patches/300-ip_tiny.patch
===================================================================
--- trunk/package/network/utils/iproute2/patches/300-ip_tiny.patch	(revision 42297)
+++ trunk/package/network/utils/iproute2/patches/300-ip_tiny.patch	(working copy)
@@ -6,7 +6,7 @@
  
 +STATIC_SYM_FILTER:=
 +ifeq ($(IP_CONFIG_TINY),y)
-+  STATIC_SYM_FILTER:=iplink_can.c iplink_ipoib.c iplink_vxlan.c
++  STATIC_SYM_FILTER:=iplink_ipoib.c iplink_vxlan.c
 +  CFLAGS += -DIPROUTE2_TINY
 +endif
 +STATIC_SYM_SOURCES:=$(filter-out $(STATIC_SYM_FILTER),$(wildcard *.c))
