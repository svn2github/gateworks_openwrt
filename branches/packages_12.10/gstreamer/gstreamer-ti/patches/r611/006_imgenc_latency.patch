--- a/src/gsttiimgenc1.c
+++ b/src/gsttiimgenc1.c
@@ -733,6 +733,7 @@ static gboolean gst_tiimgenc1_set_sink_c
          * a value was set on the command line.
          */
         if (!imgenc1->iColor) {
+        		GST_LOG("get_fourcc\n");
             if (gst_structure_get_fourcc(capStruct, "format", &format)) {
                 imgenc1->dynParams.inputChromaFormat =
                     gst_tiimgenc1_convert_fourcc(format);
@@ -745,21 +746,24 @@ static gboolean gst_tiimgenc1_set_sink_c
                 return FALSE;
             }
         }
-
+GST_LOG("going to oColor\n");
         /* If an output color format is not specified use the input color
          * format.
          */
+         #if 0
         if (!imgenc1->oColor) {
             imgenc1->params.forceChromaFormat = 
                         imgenc1->dynParams.inputChromaFormat;
         }
+        #endif
+        GST_LOG("out of oColor\n");
     } else {
         /* Mime type not supported */
         GST_ELEMENT_ERROR(imgenc1, STREAM, NOT_IMPLEMENTED, 
         ("stream type not supported"), (NULL));
         return FALSE;
     }
-
+GST_LOG("shutting down encoder\n");
     /* Shut-down any running image encoder */
     if (!gst_tiimgenc1_exit_image(imgenc1)) {
         GST_ELEMENT_ERROR(imgenc1, RESOURCE, FAILED,
@@ -989,7 +993,7 @@ static int gst_tiimgenc1_convert_fourcc(
     GST_LOG("Begin\n");
     sprintf(format, "%"GST_FOURCC_FORMAT, GST_FOURCC_ARGS(fourcc));
     GST_DEBUG("format is %s\n", format);
-
+GST_LOG("begin2\n");
     if (!strcmp(format, "UYVY")) {
         GST_LOG("Finish\n");
         return gst_tiimgenc1_convert_color_space(ColorSpace_UYVY);
@@ -1180,9 +1184,11 @@ static gboolean gst_tiimgenc1_set_codec_
     /* Use the input color format if one was not specified on the
      * command line
      */
+    #if 0
     imgenc1->params.forceChromaFormat = imgenc1->oColor == NULL ?
                     imgenc1->dynParams.inputChromaFormat :
                     gst_tiimgenc1_convert_color_space(gst_tiimgenc1_convert_attrs(VAR_OCOLORSPACE, imgenc1));
+    #endif
 
     /* Set Resolution 
      *
@@ -1549,6 +1555,17 @@ static gboolean gst_tiimgenc1_codec_star
                       &imgenc1->params, &imgenc1->dynParams);
 
     if (imgenc1->hIe == NULL) {
+			Int numAlgs, i;
+			Engine_AlgInfo algInfo;
+			algInfo.algInfoSize=sizeof(Engine_AlgInfo);
+			Engine_Error err;
+			err = Engine_getNumAlgs((Char *) imgenc1->engineName, &numAlgs);
+			GST_LOG("Use one of the following %d Algorithms: \n", numAlgs);
+			for (i = 0; i < numAlgs; i++) {
+				err = Engine_getAlgInfo((Char *) imgenc1->engineName, &algInfo, i);
+				GST_LOG("alg[%d]: name = %s typeTab = %s local = %d\n", i, algInfo.name, *(algInfo.typeTab), algInfo.isLocal);
+			}
+                                                                                                                      
         GST_ELEMENT_ERROR(imgenc1, STREAM, CODEC_NOT_FOUND,
         ("failed to create image encoder: %s\n", imgenc1->codecName), (NULL));
         GST_DEBUG("Verify that the values being used for input and output ColorSpace are supported by your coded.\n");
