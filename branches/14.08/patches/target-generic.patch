Index: trunk/target/linux/generic/patches-3.10/350-gpio-pca953x-fix_gpio_input_on_gpio_offsets.patch
===================================================================
--- trunk/target/linux/generic/patches-3.10/350-gpio-pca953x-fix_gpio_input_on_gpio_offsets.patch	(revision 0)
+++ trunk/target/linux/generic/patches-3.10/350-gpio-pca953x-fix_gpio_input_on_gpio_offsets.patch	(working copy)
@@ -0,0 +1,13 @@
+Index: linux-3.10.49/drivers/gpio/gpio-pca953x.c
+===================================================================
+--- linux-3.10.49.orig/drivers/gpio/gpio-pca953x.c	2014-07-17 15:58:15.000000000 -0700
++++ linux-3.10.49/drivers/gpio/gpio-pca953x.c	2014-10-08 14:49:46.974913692 -0700
+@@ -308,7 +308,7 @@
+ 		return 0;
+ 	}
+ 
+-	return (reg_val & (1u << off)) ? 1 : 0;
++	return (reg_val & (1u << (off % BANK_SZ))) ? 1 : 0;
+ }
+ 
+ static void pca953x_gpio_set_value(struct gpio_chip *gc, unsigned off, int val)
Index: trunk/target/linux/generic/patches-3.10/880-gateworks_system_controller.patch
===================================================================
--- trunk/target/linux/generic/patches-3.10/880-gateworks_system_controller.patch	(revision 42297)
+++ trunk/target/linux/generic/patches-3.10/880-gateworks_system_controller.patch	(working copy)
@@ -28,9 +28,9 @@
  
 --- /dev/null
 +++ b/drivers/hwmon/gsc.c
-@@ -0,0 +1,308 @@
+@@ -0,0 +1,379 @@
 +/*
-+ * A hwmon driver for the Gateworks System Controller 
++ * A hwmon driver for the Gateworks System Controller
 + * Copyright (C) 2009 Gateworks Corporation
 + *
 + * Author: Chris Lang <clang@gateworks.com>
@@ -48,6 +48,7 @@
 +#include <linux/slab.h>
 +
 +#define DRV_VERSION "0.2"
++#define I2C_RETRIES     3
 +
 +enum chips { gsp };
 +
@@ -126,6 +127,71 @@
 +	.id_table	= gsp_id,
 +};
 +
++
++/**
++ * gsc_i2c_write - Writes a register to GSC with retries
++ * @client: i2c client
++ * @reg: register address
++ * @val: value to write
++ *
++ * Returns the result of operation - 0 is success
++ */
++static int gsc_i2c_write(struct i2c_client *client, u8 reg, u8 val)
++{
++	int retry, ret;
++
++	for (retry = 0; retry < I2C_RETRIES; retry++) {
++		ret = i2c_smbus_write_byte_data(client, reg, val);
++		/*
++		 * -EAGAIN returned when the i2c host controller is busy
++		 * -EIO returned when i2c device is busy
++		 */
++		if (ret != -EAGAIN && ret != -EIO)
++			break;
++	}
++	if (ret < 0) {
++		dev_err(&client->dev, ">> 0x%02x %d\n", reg, ret);
++		return ret;
++	}
++	dev_dbg(&client->dev, ">> 0x%02x=0x%02x (%d)\n", reg,
++		val, retry);
++
++	return 0;
++}
++
++/**
++ * gsc_i2c_read - Reads register from GSC with retries
++ * @client: i2c client
++ * @reg: register address
++ * @val: value to write
++ *
++ * Returns 0 on success
++ */
++static int gsc_i2c_read(struct i2c_client *client, u8 reg, u8 *val)
++{
++	int retry, ret;
++
++	for (retry = 0; retry < I2C_RETRIES; retry++) {
++		ret = i2c_smbus_read_byte_data(client, reg);
++		/*
++		 * -EAGAIN returned when the i2c host controller is busy
++		 * -EIO returned when i2c device is busy
++		 */
++		if (ret != -EAGAIN && ret != -EIO)
++			break;
++	}
++	if (ret < 0) {
++		dev_err(&client->dev, "<< 0x%02x %d\n", reg, ret);
++		return ret;
++	}
++
++	*val = ret & 0xff;
++	dev_dbg(&client->dev, "<< 0x%02x=0x%02x (%d)\n", reg,
++		*val, retry);
++
++	return 0;
++}
++
 +/* All registers are word-sized, except for the configuration registers.
 + * AD7418 uses a high-byte first convention. Do NOT use those functions to
 + * access the configuration registers CONF and CONF2, as they are byte-sized.
@@ -132,26 +198,31 @@
 + */
 +static inline int gsp_read(struct i2c_client *client, u8 reg)
 +{
-+	unsigned int adc = 0;
++	unsigned int adc, i, err;
++	u8 b;
++
 +	if (reg == GSP_REG_TEMP_IN || reg > GSP_REG_CURRENT)
-+	{
-+		adc |= i2c_smbus_read_byte_data(client, reg);
-+		adc |= i2c_smbus_read_byte_data(client, reg + 1) << 8;
-+		return adc;
-+	}
++		i = 2;
 +	else
-+	{
-+		adc |= i2c_smbus_read_byte_data(client, reg);
-+		adc |= i2c_smbus_read_byte_data(client, reg + 1) << 8;
-+		adc |= i2c_smbus_read_byte_data(client, reg + 2) << 16;
-+		return adc;
++		i = 3;
++
++	adc = 0;
++	while (i-- > 0) {
++		err = gsc_i2c_read(client, reg + i, &b);
++		if (err)
++			return err;
++		adc |= (b << (8*i));
 +	}
++	if (reg == GSP_REG_TEMP_IN && adc > 0x8000)
++		adc -= 0xffff;
++
++	return adc;
 +}
 +
 +static inline int gsp_write(struct i2c_client *client, u8 reg, u16 value)
 +{
-+	i2c_smbus_write_byte_data(client, reg, value & 0xff);
-+	i2c_smbus_write_byte_data(client, reg + 1, ((value >> 8) & 0xff));
++	gsc_i2c_write(client, reg, value & 0xff);
++	gsc_i2c_write(client, reg + 1, ((value >> 8) & 0xff));
 +	return 1;
 +}
 +
Index: trunk/target/linux/generic/patches-3.14/780-igb-Unset-IGB_FLAG_HAS_MSIX-flag-when-falling-back-t.patch
===================================================================
--- trunk/target/linux/generic/patches-3.14/780-igb-Unset-IGB_FLAG_HAS_MSIX-flag-when-falling-back-t.patch	(revision 0)
+++ trunk/target/linux/generic/patches-3.14/780-igb-Unset-IGB_FLAG_HAS_MSIX-flag-when-falling-back-t.patch	(working copy)
@@ -0,0 +1,46 @@
+From f97c9a919a69c534886e937ac17b612005da0102 Mon Sep 17 00:00:00 2001
+From: Christoph Paasch <christoph.paasch@uclouvain.be>
+Date: Fri, 21 Mar 2014 03:48:19 -0700
+Subject: igb: Fix Null-pointer dereference in igb_reset_q_vector
+
+When igb_set_interrupt_capability() calls
+igb_reset_interrupt_capability() (e.g., because CONFIG_PCI_MSI is unset),
+num_q_vectors has been set but no vector has yet been allocated.
+
+igb_reset_interrupt_capability() will then call igb_reset_q_vector,
+which assumes that the vector is allocated. As this is not the case, we
+are accessing a NULL-pointer.
+
+This patch fixes it by checking that q_vector is indeed different from
+NULL.
+
+Fixes: 02ef6e1d0b0023 (igb: Fix queue allocation method to accommodate changing during runtime)
+Cc: Carolyn Wyborny <carolyn.wyborny@intel.com>
+Signed-off-by: Christoph Paasch <christoph.paasch@uclouvain.be>
+Tested-by: Jeff Pieper <jeffrey.e.pieper@intel.com>
+Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
+Signed-off-by: Tim Harvey <tharvey@gateworks.com>
+---
+ drivers/net/ethernet/intel/igb/igb_main.c | 6 ++++++
+ 1 file changed, 6 insertions(+)
+
+diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
+index 6063cbd..6bb17f3 100644
+--- a/drivers/net/ethernet/intel/igb/igb_main.c
++++ b/drivers/net/ethernet/intel/igb/igb_main.c
+@@ -1015,6 +1015,12 @@ static void igb_reset_q_vector(struct igb_adapter *adapter, int v_idx)
+ {
+ 	struct igb_q_vector *q_vector = adapter->q_vector[v_idx];
+ 
++	/* Coming from igb_set_interrupt_capability, the vectors are not yet
++	 * allocated. So, q_vector is NULL so we should stop here.
++	 */
++	if (!q_vector)
++		return;
++
+ 	if (q_vector->tx.ring)
+ 		adapter->tx_ring[q_vector->tx.ring->queue_index] = NULL;
+ 
+-- 
+1.8.3.2
+
Index: trunk/target/linux/generic/patches-3.14/880-gateworks_system_controller.patch
===================================================================
--- trunk/target/linux/generic/patches-3.14/880-gateworks_system_controller.patch	(revision 42297)
+++ trunk/target/linux/generic/patches-3.14/880-gateworks_system_controller.patch	(working copy)
@@ -28,9 +28,9 @@
  
 --- /dev/null
 +++ b/drivers/hwmon/gsc.c
-@@ -0,0 +1,308 @@
+@@ -0,0 +1,379 @@
 +/*
-+ * A hwmon driver for the Gateworks System Controller 
++ * A hwmon driver for the Gateworks System Controller
 + * Copyright (C) 2009 Gateworks Corporation
 + *
 + * Author: Chris Lang <clang@gateworks.com>
@@ -48,6 +48,7 @@
 +#include <linux/slab.h>
 +
 +#define DRV_VERSION "0.2"
++#define I2C_RETRIES     3
 +
 +enum chips { gsp };
 +
@@ -126,6 +127,71 @@
 +	.id_table	= gsp_id,
 +};
 +
++
++/**
++ * gsc_i2c_write - Writes a register to GSC with retries
++ * @client: i2c client
++ * @reg: register address
++ * @val: value to write
++ *
++ * Returns the result of operation - 0 is success
++ */
++static int gsc_i2c_write(struct i2c_client *client, u8 reg, u8 val)
++{
++	int retry, ret;
++
++	for (retry = 0; retry < I2C_RETRIES; retry++) {
++		ret = i2c_smbus_write_byte_data(client, reg, val);
++		/*
++		 * -EAGAIN returned when the i2c host controller is busy
++		 * -EIO returned when i2c device is busy
++		 */
++		if (ret != -EAGAIN && ret != -EIO)
++			break;
++	}
++	if (ret < 0) {
++		dev_err(&client->dev, ">> 0x%02x %d\n", reg, ret);
++		return ret;
++	}
++	dev_dbg(&client->dev, ">> 0x%02x=0x%02x (%d)\n", reg,
++		val, retry);
++
++	return 0;
++}
++
++/**
++ * gsc_i2c_read - Reads register from GSC with retries
++ * @client: i2c client
++ * @reg: register address
++ * @val: value to write
++ *
++ * Returns 0 on success
++ */
++static int gsc_i2c_read(struct i2c_client *client, u8 reg, u8 *val)
++{
++	int retry, ret;
++
++	for (retry = 0; retry < I2C_RETRIES; retry++) {
++		ret = i2c_smbus_read_byte_data(client, reg);
++		/*
++		 * -EAGAIN returned when the i2c host controller is busy
++		 * -EIO returned when i2c device is busy
++		 */
++		if (ret != -EAGAIN && ret != -EIO)
++			break;
++	}
++	if (ret < 0) {
++		dev_err(&client->dev, "<< 0x%02x %d\n", reg, ret);
++		return ret;
++	}
++
++	*val = ret & 0xff;
++	dev_dbg(&client->dev, "<< 0x%02x=0x%02x (%d)\n", reg,
++		*val, retry);
++
++	return 0;
++}
++
 +/* All registers are word-sized, except for the configuration registers.
 + * AD7418 uses a high-byte first convention. Do NOT use those functions to
 + * access the configuration registers CONF and CONF2, as they are byte-sized.
@@ -132,26 +198,31 @@
 + */
 +static inline int gsp_read(struct i2c_client *client, u8 reg)
 +{
-+	unsigned int adc = 0;
++	unsigned int adc, i, err;
++	u8 b;
++
 +	if (reg == GSP_REG_TEMP_IN || reg > GSP_REG_CURRENT)
-+	{
-+		adc |= i2c_smbus_read_byte_data(client, reg);
-+		adc |= i2c_smbus_read_byte_data(client, reg + 1) << 8;
-+		return adc;
-+	}
++		i = 2;
 +	else
-+	{
-+		adc |= i2c_smbus_read_byte_data(client, reg);
-+		adc |= i2c_smbus_read_byte_data(client, reg + 1) << 8;
-+		adc |= i2c_smbus_read_byte_data(client, reg + 2) << 16;
-+		return adc;
++		i = 3;
++
++	adc = 0;
++	while (i-- > 0) {
++		err = gsc_i2c_read(client, reg + i, &b);
++		if (err)
++			return err;
++		adc |= (b << (8*i));
 +	}
++	if (reg == GSP_REG_TEMP_IN && adc > 0x8000)
++		adc -= 0xffff;
++
++	return adc;
 +}
 +
 +static inline int gsp_write(struct i2c_client *client, u8 reg, u16 value)
 +{
-+	i2c_smbus_write_byte_data(client, reg, value & 0xff);
-+	i2c_smbus_write_byte_data(client, reg + 1, ((value >> 8) & 0xff));
++	gsc_i2c_write(client, reg, value & 0xff);
++	gsc_i2c_write(client, reg + 1, ((value >> 8) & 0xff));
 +	return 1;
 +}
 +
