Send SPS/PPS header every I-Frame

Index: src/gsttiquicktime_h264.c
===================================================================
--- a/src/gsttiquicktime_h264.c	2012-03-01 07:00:36.079295357 -0800
+++ b/src/gsttiquicktime_h264.c	2012-03-01 07:01:00.000000000 -0800
@@ -509,6 +509,30 @@
 }
 
 /******************************************************************************
+ * gst_h264_create_sps_pps_header
+ *  This function create SPS/PPS header prefixed with NAL code.
+ *****************************************************************************/
+GstBuffer* gst_h264_create_sps_pps_header(Buffer_Handle hBuf)
+{
+    GstBuffer *nal, *sps, *pps, *sps_pps_header = NULL;
+
+    nal = gst_h264_get_nal_prefix_code();
+
+    if (!gst_h264_create_sps_pps(hBuf, &sps, &pps)) {
+        goto exit;
+    }
+    /* NAL + SPS + NAL + PPS */
+    gst_buffer_ref(nal);
+    sps_pps_header = gst_buffer_join(nal, sps);
+    gst_buffer_ref(nal);
+    sps_pps_header = gst_buffer_join(sps_pps_header, nal);
+    sps_pps_header = gst_buffer_join(sps_pps_header, pps);
+
+    exit:   
+        return sps_pps_header; 
+}
+
+/******************************************************************************
  * gst_h264_create_codec_data
  *****************************************************************************/
 GstBuffer* gst_h264_create_codec_data (Buffer_Handle hBuf)
Index: src/gsttiquicktime_h264.h
===================================================================
--- a/src/gsttiquicktime_h264.h	2012-03-01 07:00:36.087295387 -0800
+++ b/src/gsttiquicktime_h264.h	2012-03-01 07:00:51.000000000 -0800
@@ -89,6 +89,9 @@
 /* Function to create codec_data (avcC atom) from h264 stream */
 GstBuffer* gst_h264_create_codec_data(Buffer_Handle hBuf);
 
+/* Function to create NAL prefixed sps, pps header from h264 stream */
+GstBuffer* gst_h264_create_sps_pps_header (Buffer_Handle hBuf);
+
 #endif /* __GST_TIQUICKTIME_H264_H__ */
 
 
Index: src/gsttividenc1.c
===================================================================
--- a/src/gsttividenc1.c	2012-03-01 07:00:36.123295565 -0800
+++ b/src/gsttividenc1.c	2012-03-01 07:06:44.000000000 -0800
@@ -448,6 +448,7 @@
     videnc1->encodingPreset         = 1;
     videnc1->byteStream             = TRUE;
     videnc1->codec_data             = NULL;
+    videnc1->sps_pps                = NULL;
 }
 
 /******************************************************************************
@@ -1379,6 +1380,12 @@
         videnc1->codec_data = NULL;
     }
 
+    if (videnc1->sps_pps) {
+        GST_LOG("freeing sps_pps buffer\n");
+        gst_buffer_unref(videnc1->sps_pps);
+        videnc1->sps_pps = NULL;
+    }
+
     GST_LOG("end exit_video\n");
     return TRUE;
 }
@@ -1656,6 +1663,12 @@
                 videnc1->codec_data = gst_h264_create_codec_data(hDstBuf);
             }
         }
+        else {
+            /* generate sps/pps header prefixed with start code */
+            if (!videnc1->sps_pps) {
+                videnc1->sps_pps = gst_h264_create_sps_pps_header(hDstBuf);
+            }
+        }
     }
 }
 
@@ -1664,7 +1677,7 @@
  *  Function parses and push the output buffer .
  *****************************************************************************/
 GstFlowReturn  gst_tividenc1_parse_and_push (GstTIVidenc1 *videnc1, 
-    GstBuffer *outBuf)
+    GstBuffer *outBuf, IVIDEO_FrameType frameType)
 {
     guint8 *data;
     guint   len;
@@ -1684,6 +1697,13 @@
             data[1] = (len >> 16) & 0xff;
             data[0] = (len >> 24) & 0xff;
         }
+        /* prefix I-frame with SPS/PPS header */
+        else {
+            if (frameType == IVIDEO_I_FRAME) {
+                gst_buffer_ref(videnc1->sps_pps);
+                outBuf = gst_buffer_join(videnc1->sps_pps, outBuf);
+            }
+        }
     }
 
     return gst_pad_push(videnc1->srcpad, outBuf);
@@ -1707,6 +1727,7 @@
     GstBuffer           *outBuf;
     Int                 bufIdx;
     Int                 ret;
+    IVIDEO_FrameType    frameType;
 
     /* Calculate the duration of a single frame in this stream */
     frameDuration = gst_tividenc1_frame_duration(videnc1);
@@ -1797,6 +1818,7 @@
         /* Invoke the video encoder */
         GST_LOG("invoking the video encoder\n");
         ret   = Venc1_process(videnc1->hVe1, hInBuf, hDstBuf);
+        frameType = BufferGfx_getFrameType(hInBuf);
 
         encDataConsumed = GST_BUFFER_SIZE(encDataWindow);
 
@@ -1862,7 +1884,8 @@
 
         /* Parse and Push the transport buffer to the source pad */
         GST_LOG("pushing display buffer to source pad\n");
-        if (gst_tividenc1_parse_and_push(videnc1, outBuf) != GST_FLOW_OK) {
+        if (gst_tividenc1_parse_and_push(videnc1, outBuf, frameType) != 
+                GST_FLOW_OK) {
             GST_DEBUG("push to source pad failed\n");
             goto thread_failure;
         }
Index: src/gsttividenc1.h
===================================================================
--- a/src/gsttividenc1.h	2012-03-01 07:00:36.131295610 -0800
+++ b/src/gsttividenc1.h	2012-03-01 07:02:24.000000000 -0800
@@ -112,7 +112,7 @@
   GstTICircBuffer *circBuf;
 
   /* H.264 header */
-  GstBuffer  *codec_data;
+  GstBuffer  *codec_data, *sps_pps;
   gboolean   byteStream;
 };
 
